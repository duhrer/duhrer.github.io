{"version":3,"sources":["Colours.js","Cell.js","Row.js","Grid.js","MultiSelect.js","flock.js","fluid.js","MidiPanel.js","Puzzle.js","index.js"],"names":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","Cell","props","handleClick","onClick","row","col","handleKeyDown","event","onKeyDown","buttonRef","React","createRef","this","current","focus","className","value","stringValue","undefined","toString","ref","style","Colours","Component","defaultProps","Row","offset","renderStack","i","numCells","push","renderSquare","cellRefs","cells","key","renderSquares","watchedKeys","Grid","rebuildRefs","Array","numRows","rowIndex","colIndex","targetRow","targetCol","indexOf","toFocus","prevProps","grid","renderRows","MultiSelectOption","label","MultiSelect","handleChange","selectedValueMap","currentTarget","options","length","singleOption","selected","selectedValues","Object","keys","setState","stateChangeCallbacks","forEach","callback","state","optionsMarkup","optionsKeys","a","optionDef","optionLabel","title","multiple","onChange","defaultValue","flock","midi","read","data","fn","status","channel","noteOff","noteOn","polyAftertouch","controlChange","programChange","channelAftertouch","pitchbend","system","fail","JSON","stringify","note","type","velocity","pressure","number","program","twoByteValue","messageFailure","sysex","songPointer","songSelect","tuneRequest","clock","start","stop","activeSense","reset","begin","end","Uint8Array","subarray","slice","valueMessage","val","systemRealtimeMessages","createSystemRealtimeMessageReaders","write","midiMessage","aftertouch","largeValueMessage","singleByteMessage","threeByteMessage","twoByteMessage","msNibble","lsNibble","statusByte","data1","data2","array","len","framedData","set","error","Error","fluid","original","parse","MidiPanel","updateSelectedInputs","selectedInputs","updateSelectedOutputs","selectedOutputs","outputChangeListeners","handleStateChange","changedPort","port","defsToUpdate","updatedDefs","copy","id","name","updatedStateFragment","sendMidiMessage","dataAsJson","filterRegexp","invert","outputIds","outputDefs","shouldInvert","outputId","matchesFilter","outputDef","matchesPattern","match","outputPorts","send","inputListeners","outputAccumulator","inputDefs","navigator","requestMIDIAccess","software","then","access","inputs","values","input","onmidimessage","handleMidiInput","next","done","outputs","output","onstatechange","inputId","midiMessageEvent","inputDef","inputSelected","inputListener","Container","Col","Button","block","show","variant","xl","lg","md","sm","xs","Puzzle","updateLaunchpad","outputCallbacks","launchpadMessages","rowCells","noteOnMessage","o","outputCallback","m","updateOtherDevices","prevState","updatedCells","inverted","betweenNotes","noteLength","updatedCell","onMessage","offMessage","timeOn","timeOff","setTimeout","registerOutput","Math","floor","pushFromSquare","currentState","thisRow","emptyCellColumnIndex","rowShiftedState","shiftedRow","shiftArray","thisColumn","extractCol","emptyCellRowIndex","columnShiftedState","shiftedColumn","originalArray","emptySpaceIndex","clickedEntryIndex","shiftedArray","splice","columnCells","HideableInstructions","useState","setShow","Alert","Heading","ReactDOM","render","document","getElementById"],"mappings":"oSACmB,GACXA,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC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","file":"static/js/main.8c31415c.chunk.js","sourcesContent":["    // Sampled from illustrations in the Launchpad Pro Programmer's Guide and device photos.\n    export default {\n        0: \"#000000\",\n        1: \"#CCCCCC\",\n        2: \"#EEEEEE\",\n        3: \"#FFFFFF\",\n        4: \"#FDB1CF\",\n        5: \"#FF0000\",\n        6: \"#cc0000\",\n        7: \"#aa0000\",\n        8: \"#FDFBF2\",\n        9: \"#fdaa84\",\n        10: \"#fdaa84\",\n        11: \"#cc9900\",\n        12: \"#ffdd66\",\n        13: \"#fdfc8f\",\n        14: \"#cccc00\",\n        15: \"#999900\",\n        16: \"#ccffcc\",\n        17: \"#99ff99\",\n        18: \"#66cc66\",\n        19: \"#99ff99\",\n        20: \"#99ffcc\",\n        21: \"#21FA04\",\n        22: \"#1BC208\",\n        23: \"#16A20A\",\n        24: \"#23F9BE\",\n        25: \"#24FFAE\",\n        26: \"#19AC1E\",\n        27: \"#26FDB5\",\n        28: \"#32F97D\",\n        29: \"#2BFFFF\",\n        30: \"#30FCDE\",\n        31: \"#20DFAA\",\n        32: \"#C6FCF9\",\n        33: \"#21E9CB\",\n        34: \"#1DD0C8\",\n        35: \"#19B295\",\n        36: \"#BFFBFB\",\n        37: \"#1DAECF\",\n        38: \"#1DC9EF\",\n        39: \"#22D6F5\",\n        40: \"#BBF3FB\",\n        41: \"#36DBFD\",\n        42: \"#37AAF4\",\n        43: \"#2EB8FD\",\n        44: \"#AEAFFD\",\n        45: \"#0101FF\",\n        46: \"#5B40ED\",\n        47: \"#4F3BC1\",\n        48: \"#D1C2FD\",\n        49: \"#DDA1FC\",\n        50: \"#B65DED\",\n        51: \"#7D3CB5\",\n        52: \"#F9C8F9\",\n        53: \"#F735F8\",\n        54: \"#F735F8\",\n        55: \"#B824BC\",\n        56: \"#F69FE1\",\n        57: \"#F954FB\",\n        58: \"#E229B3\",\n        59: \"#DC00B8\",\n        60: \"#DD7D35\",\n        61: \"#F6BB28\",\n        62: \"#DBCA12\",\n        63: \"#83CD3C\",\n        64: \"#1ABB10\",\n        65: \"#23F0A5\",\n        66: \"#5962EB\",\n        67: \"#737EFB\",\n        68: \"#29FFFD\",\n        69: \"#AB94FD\",\n        70: \"#F1F4FE\",\n        71: \"#AAA8BB\",\n        72: \"#F72C4E\",\n        73: \"#EFFFDE\",\n        74: \"#D3F846\",\n        75: \"#E1FFDB\",\n        76: \"#25FE13\",\n        77: \"#25FAB4\",\n        78: \"#26DEFA\",\n        79: \"#26DCFD\",\n        80: \"#717AFD\",\n        81: \"#DB5FFC\",\n        82: \"#FCA9FE\",\n        83: \"#C08650\",\n        84: \"#FC8F0D\",\n        85: \"#CAFF58\",\n        86: \"#83F62C\",\n        87: \"#00FF00\",\n        88: \"#21F906\",\n        89: \"#C2FFEF\",\n        90: \"#5AFFFC\",\n        91: \"#C4FFFE\",\n        92: \"#BAFEFD\",\n        93: \"#C0D5FE\",\n        94: \"#FCB2FD\",\n        95: \"#FC5DFD\",\n        96: \"#FC7E09\",\n        97: \"#D8E014\",\n        98: \"#B6FF29\",\n        99: \"#E6DB0F\",\n        100: \"#C9A00E\",\n        101: \"#1CC998\",\n        102: \"#4CFFD1\",\n        103: \"#ABACBE\",\n        104: \"#A4BCFD\",\n        105: \"#FCE6BB\",\n        106: \"#E20011\",\n        107: \"#FDB699\",\n        108: \"#F28E75\",\n        109: \"#F8E376\",\n        110: \"#D1F380\",\n        111: \"#C9FF50\",\n        112: \"#94919D\",\n        113: \"#E7FAD9\",\n        114: \"#BAFFF2\",\n        115: \"#efefFf\",\n        116: \"#EFFFEF\",\n        117: \"#C3E1F2\",\n        118: \"#F2F2F2\",\n        119: \"#FEFEFF\",\n        120: \"#E7000C\",\n        121: \"#BD0610\",\n        122: \"#00ff00\",\n        123: \"#1DC60D\",\n        124: \"#FEFF33\",\n        125: \"#A79E0C\",\n        126: \"#F8A80E\",\n        127: \"#D8680C\"\n    };","// @flow\nimport React  from 'react';\n\nimport Colours from \"./Colours\";\n\nimport type {ClickHandler, KeyHandler} from \"./HandlerTypes\";\n\n// TODO: Figure out how this should work.\n// export type CellRef = {current:null | HTMLButtonElement};\nexport type CellRef = {current:null | any};\n\nexport type CellProps = {\n    row: number,\n    col: number,\n    value?: number,\n    onClick: ClickHandler,\n    onKeyDown: KeyHandler\n};\n\n\nexport default class Cell extends React.Component<CellProps, {}> {\n    buttonRef: ?CellRef;\n\n    static defaultProps = {\n        row: 0,\n        col: 0,\n        onClick: () => {},\n        onKeyDown: () => {}\n    }\n\n    constructor(props: CellProps) {\n        super(props);\n        this.buttonRef = React.createRef<HTMLButtonElement>();\n    }\n\n    focus() {\n        if (this.buttonRef && this.buttonRef.current) {\n            this.buttonRef.current.focus();\n        }\n    }\n\n    handleClick = () => {\n        this.props.onClick(this.props.row, this.props.col);\n    };\n\n    handleKeyDown = (event: KeyboardEvent) => {\n        this.props.onKeyDown(event, this.props.row, this.props.col);\n    };\n\n    render() {\n        const className = this.props.value === 0 ? \"cell empty\":  \"cell\";\n        const stringValue = (this.props.value === null || this.props.value === undefined || this.props.value === 0) ? \"\":  this.props.value.toString()\n        return (\n            <button\n                className={className}\n                ref={this.buttonRef}\n                onClick={this.handleClick}\n                onKeyDown={this.handleKeyDown}\n                style={{\"backgroundColor\": Colours[this.props.value]}}\n            >\n                {stringValue}\n            </button>\n        );\n    }\n}\n","// @flow\nimport React from 'react';\nimport Cell from \"./Cell\";\nimport type {CellRef} from \"./Cell\";\n\nimport type {ClickHandler, KeyHandler} from \"./HandlerTypes\";\n\nexport type RowCells = Array<number>;\n\ntype RowProps = {\n    row: number,\n    numCells: number,\n    cells: RowCells,\n    cellRefs: Array<CellRef>,\n    onKeyDown: KeyHandler,\n    onClick: ClickHandler\n}\n\nexport default class Row extends React.Component<RowProps, {}> {\n    offset: number;\n    onKeyDown: KeyHandler;\n    onClick: ClickHandler;\n\n    static defaultProps = {\n        row: 0,\n        numCells: 8,\n        cells: [],\n        cellRefs: [],\n        onKeyDown: () => {},\n        onClick: () => {}\n    }\n\n    constructor (props: RowProps) {\n        super(props);\n        this.offset   = this.props.row * 8;\n    }\n\n    renderSquares() {\n        const renderStack = [];\n        for (let i = 0; i < this.props.numCells; i++) {\n            renderStack.push(this.renderSquare(i));\n        }\n        return renderStack;\n    }\n\n    renderSquare(i: number) {\n        return <Cell\n            ref={this.props.cellRefs && this.props.cellRefs[i]}\n            value={this.props.cells && this.props.cells[i]}\n            onKeyDown={this.props.onKeyDown}\n            onClick={this.props.onClick}\n            key={\"cell-\" + (this.offset + i)} col={i} row={this.props.row}\n        />;\n    }\n\n    render () {\n        return (\n            <div className=\"row\">\n                {this.renderSquares()}\n            </div>            \n        );\n    }\n}\n","// @flow\nimport React from 'react';\nimport Row from \"./Row\";\n\nimport type {CellRef} from \"./Cell\";\nimport type {RowCells} from \"./Row\";\nimport type {ClickHandler, KeyHandler} from \"./HandlerTypes\";\n\nconst watchedKeys = [\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\"\n];\n\ntype GridProps = {\n    numCells: number,\n    numRows: number,\n    onClick: ClickHandler,\n    grid?: Array<RowCells>\n};\n\nexport default class Grid extends React.Component <GridProps, {}> {\n    cellRefs: Array<Array<CellRef>> // TODO: Refine this to use the right kind of reference.\n    static defaultProps = {\n        numRows: 8,\n        numCells: 8,\n        onClick: () => {}\n    }\n\n    constructor(props: GridProps) {\n        super(props);\n        this.rebuildRefs();\n    }\n\n    componentDidUpdate (prevProps: GridProps) {\n        if (this.props.numRows !== prevProps.numRows || this.props.numCells !== prevProps.numCells) {\n            this.rebuildRefs();\n        }\n    }\n\n    rebuildRefs = () => {\n        this.cellRefs = Array(this.props.numRows);\n\n        for (let rowIndex = 0; rowIndex < this.props.numRows; rowIndex++) {\n            this.cellRefs[rowIndex] = Array(this.props.numCells);\n            for (let colIndex = 0; colIndex < this.props.numRows; colIndex++) {\n                this.cellRefs[rowIndex][colIndex] = React.createRef<HTMLButtonElement>();\n            }\n        }\n    }\n\n    handleKeyDown: KeyHandler = (event: KeyboardEvent, targetRow: number, targetCol: number) => {\n        if (watchedKeys.indexOf(event.key) !== -1) {\n            // ArrowDown\n            if (event.key === \"ArrowDown\") {\n                targetRow = (targetRow + 1) % this.props.numRows;\n            }\n\n            // ArrowUp\n            else if (event.key === \"ArrowUp\") {\n                targetRow = (targetRow + ( this.props.numRows - 1)) % this.props.numRows;\n            }\n\n            // ArrowLeft\n            else if (event.key === \"ArrowLeft\") {\n                targetCol= (targetCol + ( this.props.numRows - 1)) % this.props.numCells;\n            }\n\n            // ArrowRight\n            else if (event.key === \"ArrowRight\") {\n                targetCol= (targetCol + 1) % this.props.numCells;\n            }\n\n            const toFocus = this.cellRefs[targetRow][targetCol];\n            if (toFocus.current) {\n                toFocus.current.focus();\n            }\n        }\n    }\n\n    renderRows() {\n        const renderStack = [];\n\n        for (let i = 0; i < this.props.numRows; i++) {\n            renderStack.push(<Row \n                cellRefs={this.cellRefs[i]}\n                numCells={this.props.numCells}\n                cells={this.props.grid && this.props.grid[i]}\n                onKeyDown={this.handleKeyDown}\n                onClick={this.props.onClick}\n                key={\"row-\" + i}\n                row={i}\n            />)\n        }\n        return renderStack;\n\n    }\n    render() {\n        return (\n            <div>\n                {this.renderRows()}\n          </div>\n        );\n    }\n  }\n","// @flow\nimport React from 'react';\n\ntype MultiSelectOptionProps = {\n    label: string,\n    value: string\n};\n\nclass MultiSelectOption extends React.Component<MultiSelectOptionProps, {}> {\n    render() {\n        return(\n            <option value={this.props.value}>{this.props.label}</option>\n        );\n    }\n}\n\nexport type OptionDef = {\n    value: string,\n    label?: string\n}\n\ntype MultiSelectProps = {\n    title: string,\n    selectedValues?: Array<string>,\n    stateChangeCallbacks?: Array<(selectedItems: Array<string>) => void>,\n    defaultValue?: string,\n    options: { [string]: OptionDef }\n}\n\ntype MultiSelectState = {\n    selectedValues: Array<string>\n};\n\nexport default class MultiSelect extends React.Component<MultiSelectProps, MultiSelectState> {\n    static defaultProps = {\n        title: \"\",\n        options: {}\n    }\n\n    constructor(props: MultiSelectProps) {\n        super(props);\n        this.state = {\n            selectedValues: props.selectedValues || []\n        }\n    }\n\n    // Apparently react can't track the selected attribute of individual options, there's an explicit warning against it.\n    // It seems like you're supposed to listen to changes on select elements instead.\n    handleChange = (event: SyntheticEvent<HTMLSelectElement>) => {\n        const selectedValueMap = { };\n        for (let i = 0; i < event.currentTarget.options.length; i++) {\n            const singleOption: HTMLOptionElement = event.currentTarget.options[i];\n            if (singleOption.selected) {\n                selectedValueMap[singleOption.value] = true;\n            }\n        }\n\n        const selectedValues: Array<string> = Object.keys(selectedValueMap);\n        this.setState({\n            selectedValues: selectedValues\n        });\n\n        if (this.props.stateChangeCallbacks) {\n            this.props.stateChangeCallbacks.forEach((callback: (selectedValues:Array<string>) => void) => {\n                callback(selectedValues);\n            });\n        }\n    }\n\n    render() {\n        const optionsMarkup = [];\n        const optionsKeys = Object.keys(this.props.options);\n        for (let a = 0; a < optionsKeys.length; a++) {\n            const key = optionsKeys[a];\n            const optionDef: OptionDef = this.props.options[key];\n            const optionLabel: string = (optionDef.label !== undefined && optionDef.label.length > 0) ? optionDef.label : optionDef.value;\n            optionsMarkup.push(<MultiSelectOption value={optionDef.value} key={\"option-\" + key} label={optionLabel}/>);\n        }\n        return (\n            <div>\n                <h2>{this.props.title}</h2>\n                <select multiple={true} onChange={this.handleChange} defaultValue={this.props.defaultValue}>\n                    {optionsMarkup}\n                </select>\n            </div>\n        );\n    }\n}","// Pure JS version of functions copied from flocking-midi: https://github.com/continuing-creativity/flocking-midi/blob/master/src/core.js\n// TODO: Replace this once Fluid and Flocking support ES6.\n\n// Pure JS equivalent of several `fluid.registerNamespace` calls.\nconst flock = {};\nflock.midi = {};\n\nflock.midi.read = function (data) {\n    const status = data[0],\n        type = status >> 4,\n        channel = status & 0xf;\n    let fn;\n\n    switch (type) {\n        case 8:\n            fn = flock.midi.read.noteOff;\n            break;\n        case 9:\n            fn = data[2] > 0 ? flock.midi.read.noteOn:  flock.midi.read.noteOff;\n            break;\n        case 10:\n            fn = flock.midi.read.polyAftertouch;\n            break;\n        case 11:\n            fn = flock.midi.read.controlChange;\n            break;\n        case 12:\n            fn = flock.midi.read.programChange;\n            break;\n        case 13:\n            fn = flock.midi.read.channelAftertouch;\n            break;\n        case 14:\n            fn = flock.midi.read.pitchbend;\n            break;\n        case 15:\n            fn = flock.midi.read.system;\n            break;\n        default:\n            return flock.fail(\"Received an unrecognized MIDI message: \" +\n                JSON.stringify(data));\n    }\n\n    return fn(channel, data);\n};\n\n// Unsupported, non-API function.\nflock.midi.read.note = function (type, channel, data) {\n    return {\n        type: type,\n        channel: channel,\n        note: data[1],\n        velocity: data[2]\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.noteOn = function (channel, data) {\n    return flock.midi.read.note(\"noteOn\", channel, data);\n};\n\n// Unsupported, non-API function.\nflock.midi.read.noteOff = function (channel, data) {\n    return flock.midi.read.note(\"noteOff\", channel, data);\n};\n\n// Unsupported, non-API function.\nflock.midi.read.polyAftertouch = function (channel, data) {\n    return {\n        type: \"aftertouch\",\n        channel: channel,\n        note: data[1],\n        pressure: data[2]\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.controlChange = function (channel, data) {\n    return {\n        type: \"control\",\n        channel: channel,\n        number: data[1],\n        value: data[2]\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.programChange = function (channel, data) {\n    return {\n        type: \"program\",\n        channel: channel,\n        program: data[1]\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.channelAftertouch = function (channel, data) {\n    return {\n        type: \"aftertouch\",\n        channel: channel,\n        pressure: data[1]\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.twoByteValue = function (data) {\n    return (data[2] << 7) | data[1];\n};\n\n// Unsupported, non-API function.\nflock.midi.read.pitchbend = function (channel, data) {\n    return {\n        type: \"pitchbend\",\n        channel: channel,\n        value: flock.midi.read.twoByteValue(data)\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.system = function (status, data) {\n    if (status === 1) {\n        return flock.midi.messageFailure(\"quarter frame MTC\");\n    }\n\n    let fn;\n    switch (status) {\n        case 0:\n            fn = flock.midi.read.sysex;\n            break;\n        case 2:\n            fn = flock.midi.read.songPointer;\n            break;\n        case 3:\n            fn = flock.midi.read.songSelect;\n            break;\n        case 6:\n            fn = flock.midi.read.tuneRequest;\n            break;\n        case 8:\n            fn = flock.midi.read.clock;\n            break;\n        case 10:\n            fn = flock.midi.read.start;\n            break;\n        case 11:\n            fn = flock.midi.read[\"continue\"];\n            break;\n        case 12:\n            fn = flock.midi.read.stop;\n            break;\n        case 14:\n            fn = flock.midi.read.activeSense;\n            break;\n        case 15:\n            fn = flock.midi.read.reset;\n            break;\n        default:\n            return flock.fail(\"Received an unrecognized MIDI system message: \" +\n                JSON.stringify(data));\n    }\n\n    return fn(data);\n};\n\n// Unsupported, non-API function.\nflock.midi.messageFailure = function (type) {\n    flock.fail(\"Flocking does not currently support MIDI \" + type + \" messages.\");\n    return;\n};\n\n// Unsupported, non-API function.\nflock.midi.read.sysex = function (data) {\n    const begin = data[0] === 0xF0 ? 1:  0,\n        end = data.length - (data[data.length - 1] === 0xF7 ? 1:  0);\n\n    // Avoid copying the data if we're working with a typed array.\n    const trimmedData = data instanceof Uint8Array ?\n        data.subarray(begin, end): \n        data.slice(begin, end);\n\n    return {\n        type: \"sysex\",\n        data: trimmedData\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.valueMessage = function (type, value) {\n    return {\n        type: type,\n        value: value\n    };\n};\n\n// Unsupported, non-API function.\nflock.midi.read.songPointer = function (data) {\n    const val = flock.midi.read.twoByteValue(data);\n    return flock.midi.read.valueMessage(\"songPointer\", val);\n};\n\n// Unsupported, non-API function.\nflock.midi.read.songSelect = function (data) {\n    return flock.midi.read.valueMessage(\"songSelect\", data[1]);\n};\n\n// Unsupported, non-API function.\nflock.midi.read.tuneRequest = function () {\n    return {\n        type: \"tuneRequest\"\n    };\n};\n\nflock.midi.systemRealtimeMessages = [\n    \"tuneRequest\",\n    \"clock\",\n    \"start\",\n    \"continue\",\n    \"stop\",\n    \"activeSense\",\n    \"reset\"\n];\n\n// Unsupported, non-API function.\nflock.midi.createSystemRealtimeMessageReaders = function (systemRealtimeMessages) {\n    // Modified to avoid use of `fluid.each`.\n    systemRealtimeMessages.forEach((type) => {\n        flock.midi.read[type] = function () {\n            return {\n                type: type\n            };\n        };\n    })\n};\n\n// Unsupported, non-API function.\nflock.midi.createSystemRealtimeMessageReaders(flock.midi.systemRealtimeMessages);\n\n\n/**\n *\n * Take a MIDI messageSpec object and convert it to an array of raw bytes suitable for sending to a MIDI device.\n *\n * @param {Object} midiMessage a MIDI messageSpec object\n * @return {Uint8Array} - an array containing the encoded MIDI message's bytes\n *\n */\nflock.midi.write = function (midiMessage) {\n    if (midiMessage.type === \"sysex\") {\n        return flock.midi.write.sysex(midiMessage);\n    }\n\n    // MIDI status nibbles are helpfully documented in this\n    // SparkFun article:\n    // https://learn.sparkfun.com/tutorials/midi-tutorial/all#messages\n    switch (midiMessage.type) {\n        case \"noteOn\":\n            return flock.midi.write.note(9, midiMessage);\n        case \"noteOff\":\n            return flock.midi.write.note(8, midiMessage);\n        case \"aftertouch\":\n            return flock.midi.write.aftertouch(midiMessage);\n        case \"control\":\n            return flock.midi.write.controlChange(midiMessage);\n        case \"program\":\n            return flock.midi.write.programChange(midiMessage);\n        case \"pitchbend\":\n            return flock.midi.write.largeValueMessage(14, midiMessage.channel, midiMessage);\n        case \"songPointer\":\n            return flock.midi.write.largeValueMessage(15, 2, midiMessage);\n        case \"songSelect\":\n            return flock.midi.write.largeValueMessage(15, 3, midiMessage);\n        case \"tuneRequest\":\n            return flock.midi.write.singleByteMessage(15, 6);\n        case \"clock\":\n            return flock.midi.write.singleByteMessage(15, 8);\n        case \"start\":\n            return flock.midi.write.singleByteMessage(15, 10);\n        case \"continue\":\n            return flock.midi.write.singleByteMessage(15, 11);\n        case \"stop\":\n            return flock.midi.write.singleByteMessage(15, 12);\n        case \"activeSense\":\n            return flock.midi.write.singleByteMessage(15, 14);\n        case \"reset\":\n            return flock.midi.write.singleByteMessage(15, 15);\n        default:\n            flock.fail(\"Cannot write an unrecognized MIDI message of type '\" + midiMessage.type + \"'.\");\n    }\n};\n\n// Unsupported, non-API function.\nflock.midi.write.note = function (status, midiMessage) {\n    return flock.midi.write.threeByteMessage(status, midiMessage.channel,\n        midiMessage.note, midiMessage.velocity);\n};\n\n// Unsupported, non-API function.\nflock.midi.write.controlChange = function (midiMessage) {\n    return flock.midi.write.threeByteMessage(11, midiMessage.channel,\n        midiMessage.number, midiMessage.value);\n};\n\n// Unsupported, non-API function.\nflock.midi.write.programChange = function (midiMessage) {\n    return flock.midi.write.twoByteMessage(12, midiMessage.channel, midiMessage.program);\n};\n\n// Unsupported, non-API function.\nflock.midi.write.aftertouch = function (midiMessage) {\n    // polyAfterTouch\n    if (midiMessage.note) {\n        return flock.midi.write.note(10, midiMessage);\n    }\n\n    // afterTouch\n    return flock.midi.write.twoByteMessage(13, midiMessage.channel, midiMessage.pressure);\n};\n\n// Unsupported, non-API function.\nflock.midi.write.singleByteMessage = function (msNibble, lsNibble) {\n    const data = new Uint8Array(1);\n    data[0] = flock.midi.write.statusByte(msNibble, lsNibble);\n    return data;\n};\n\n// Unsupported, non-API function.\nflock.midi.write.twoByteMessage = function (msNibble, lsNibble, data1) {\n    const data = new Uint8Array(2);\n    data[0] = flock.midi.write.statusByte(msNibble, lsNibble);\n    data[1] = data1;\n    return data;\n};\n\n// Unsupported, non-API function.\nflock.midi.write.threeByteMessage = function (msNibble, lsNibble, data1, data2) {\n    const data = new Uint8Array(3);\n    data[0] = flock.midi.write.statusByte(msNibble, lsNibble);\n    data[1] = data1;\n    data[2] = data2;\n    return data;\n};\n\n// Unsupported, non-API function.\nflock.midi.write.largeValueMessage = function (msNibble, lsNibble, midiMessage) {\n    const data = new Uint8Array(3);\n    data[0] = flock.midi.write.statusByte(msNibble, lsNibble);\n    flock.midi.write.twoByteValue(midiMessage.value, data, 1);\n    return data;\n};\n\n/**\n *\n * Output a status byte.\n *\n * @param {Number} msNibble - the first nibble of the status byte (often the command code).\n * @param {Number} lsNibble - the second nibble of the status byte (often the channel).\n * @return {Byte} A status byte that combines the two inputs.\n */\n// Unsupported, non-API function.\nflock.midi.write.statusByte = function (msNibble, lsNibble) {\n    return (msNibble << 4) + lsNibble;\n};\n\n/**\n *\n * Converts a 14-bit numeric value to two MIDI bytes.\n *\n * @param {Number} value - A 14-bit number to convert\n * @param {Unit8TypedArray} array - An array to write the value to.\n * @param {Integer} offset - The optional offset in the array to start writing at.  Defaults to 0.\n *\n */\n// Unsupported, non-API function.\nflock.midi.write.twoByteValue =  function (value, array, offset) {\n    offset = offset || 0;\n    array[offset] = value & 0x7f; // LSB\n    array[offset + 1] = (value >> 7) & 0x7f; // MSB\n};\n\n/**\n *\n * Convert a MIDI Message represented as a Javascript Object into a Sysex message represented as a Uint8Array.\n *\n * NOTE: This function does not accept framing, i.e. a leading 0xF0 and/or trailing 0xF7, and will fail if called\n * with either.\n *\n * @param {Object} midiMessage - The MIDI message represented as a Javascript Object.\n * @return {Uint8Array} - The sysex message.\n */\n// Unsupported, non-API function.\nflock.midi.write.sysex = function (midiMessage) {\n    if (midiMessage.data[0] === 0xF0 || midiMessage.data[midiMessage.data.length - 1] === 0xF7) {\n        flock.fail(\"Sysex payloads should not include framing bytes.\");\n    }\n\n    const data = midiMessage.data,\n        len = data.length;\n\n    const framedData = new Uint8Array(len + 2);\n    framedData[0] = 0xF0;\n    framedData[len + 1] = 0xF7;\n    framedData.set(data, 1);\n\n    return framedData;\n};\n\n// QnD replacement for flock.fail\nflock.fail = function(error) {\n    throw(new Error(error));\n};\n\nexport default flock;","const fluid = {};\n\n// Very naive replacement for `fluid.copy`.\nfluid.copy = function (original) {\n    return JSON.parse(JSON.stringify(original));\n}\n\nexport default fluid;","// @flow\nimport React from 'react';\n\nimport MultiSelect from './MultiSelect';\n\nimport type {OptionDef} from \"./MultiSelect\";\nimport type {OutputCallback} from \"./HandlerTypes\"\n\nimport flock from \"./flock\";\nimport fluid from \"./fluid\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nexport type MidiMessage = {\n    type: string,\n    note?: number,\n    velocity?: number,\n    channel: number,\n    number?: number,\n    value?: number,\n    pressure?: number,\n    data?: Array<number>\n};\n\ntype InputListener = (message: MidiMessage) => void;\ntype OutputChangeListener = () => void;\n\ntype MidiPanelProps = {\n    numRows: number,\n    numCells: number,\n    inputListeners: Array<InputListener>,\n    outputAccumulator?: (fn: OutputCallback) => void,\n    outputChangeListeners?: Array<OutputChangeListener>\n};\n\ntype MidiPanelState = {\n    inputDefs: { [string]: OptionDef },\n    selectedInputs: Array<string>,\n    outputDefs: { [string]: OptionDef },\n    selectedOutputs: Array<string>,\n    show: false\n};\n\n\nexport default class MidiPanel extends React.Component<MidiPanelProps, MidiPanelState> {\n    inputListeners: Array<InputListener>;\n    outputChangeListeners: Array<OutputChangeListener>;\n    outputPorts: { [string]: MIDIOutput };\n\n    static defaultProps = {\n        numRows: 8,\n        numCells: 8,\n        inputListeners: []\n    }\n\n    constructor(props: MidiPanelProps) {\n        super(props);\n\n        // Give the enclosing puzzle some way to listen to and react to MIDI inputs.\n        // TODO: Remove this once we allow the Puzzle to send messages instead.\n        this.inputListeners = props.inputListeners || [this.sendMidiMessage];\n        this.outputChangeListeners = props.outputChangeListeners || [];\n\n        // Provide some means of letting this component transmit MIDI messages received from \"outside\".\n        if (props.outputAccumulator) {\n            props.outputAccumulator(this.sendMidiMessage);\n        }\n\n        this.outputPorts = {};\n        this.state={\n            inputDefs: {},\n            selectedInputs: [],\n            outputDefs: {},\n            selectedOutputs: []\n        }\n\n        // Read the initial set of ports and wire up our state change listener.\n        if (navigator && navigator.requestMIDIAccess) {\n            const midiAccessPromise = navigator.requestMIDIAccess({ sysex: true, software: true});\n            midiAccessPromise.then( (access: MIDIAccess) => {\n                const inputs: Iterator<MIDIInput> = access.inputs.values();\n                const inputDefs = {};\n                for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n                    inputDefs[input.value.id] = {\n                        label: input.value.name,\n                        value: input.value.id\n                    };\n    \n                    // Wire up our common handler function to catch this input's MIDI messages.\n                    input.value.onmidimessage = (data) => {\n                        if (input.value) {\n                            this.handleMidiInput(input.value.id, data);\n                        }\n                    };\n                }\n                this.setState({ inputDefs: inputDefs });\n    \n                const outputDefs = {};\n                const outputs: Iterator<MIDIOutput> = access.outputs.values();\n                for (let output = outputs.next(); output && !output.done; output = outputs.next()) {\n                    outputDefs[output.value.id] = {\n                        label: output.value.name,\n                        value: output.value.id\n                    };\n    \n                    // Since we need to \"send\" to the objects, stash them for later use.\n                    this.outputPorts[output.value.id] = output.value;\n                };\n    \n                this.setState({ outputDefs: outputDefs });\n    \n                access.onstatechange = this.handleStateChange;\n            });\n        }\n    }\n\n    updateSelectedInputs = (selectedInputs: Array<string>) => {\n        this.setState({selectedInputs: selectedInputs});\n    }\n\n    updateSelectedOutputs = (selectedOutputs:  Array<string>) => {\n        this.setState({selectedOutputs: selectedOutputs});\n        this.outputChangeListeners.forEach((callback: () => void) => {\n            callback();\n        });\n    }\n\n    handleStateChange = (event: MIDIConnectionEvent) =>{\n        const changedPort = event.port;\n\n        const defsToUpdate = changedPort.type === \"input\" ? \"inputDefs\":  \"outputDefs\";\n        const updatedDefs: { [string]: OptionDef } = fluid.copy(this.state[defsToUpdate]);\n\n        if (changedPort.state === \"connected\") {\n            updatedDefs[changedPort.id] = {\n                label: changedPort.name,\n                value: changedPort.id\n            }\n        }\n        else {\n            delete updatedDefs[changedPort.id];\n        }\n\n        const updatedStateFragment: MidiPanelState = {};\n        updatedStateFragment[defsToUpdate] = updatedDefs;\n        this.setState(updatedStateFragment);\n    }\n    \n    handleMidiInput (inputId: string, midiMessageEvent: MIDIMessageEvent) {\n        // Confirm that this input is selected.\n        const inputDef: OptionDef = this.state.inputDefs[inputId];\n        const inputSelected: boolean = this.state.selectedInputs.indexOf(inputId) !== -1;\n        if (inputDef && inputSelected && this.inputListeners.length) {\n            const dataAsJson :MidiMessage = flock.midi.read(midiMessageEvent.data);\n            this.inputListeners.forEach((inputListener: (message: MidiMessage) => void) => {\n                inputListener(dataAsJson);\n            });\n        }\n    }\n\n    sendMidiMessage = (dataAsJson: MidiMessage, filterRegexp: RegExp, invert?: boolean) => {\n        const outputIds = Object.keys(this.state.outputDefs);\n        const data: Iterable<number> = flock.midi.write(dataAsJson);\n        const shouldInvert: boolean = invert === true ? true : false;\n        outputIds.forEach((outputId: string) => {\n            const outputSelected = this.state.selectedOutputs.indexOf(outputId) !== -1;\n\n            if (outputSelected) {\n                let matchesFilter = true;\n\n                if (filterRegexp) {\n                    const outputDef = this.state.outputDefs[outputId];\n                    const valueToMatch = (outputDef.label !== undefined && outputDef.label.length > 0) ? outputDef.label : outputDef.value;\n                    const matchesPattern = valueToMatch.match(filterRegexp);\n                    if ( (!matchesPattern && !shouldInvert) || (shouldInvert && matchesPattern)) {\n                        matchesFilter = false;\n                    }\n                }\n\n                if (matchesFilter) {\n                    const outputPort = this.outputPorts[outputId];\n                    outputPort.send(data);\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row className=\"mt-3\">\n                    <Col>\n                        <Button block className={this.state.show ? \"d-none\" : null} variant=\"secondary\" onClick={() => this.setState({ show: true})}>Show MIDI Options</Button>\n                        <Button block className={this.state.show ? null : \"d-none\"} variant=\"secondary\" onClick={() => this.setState({show: false})}>Hide MIDI Options</Button>\n                    </Col>\n                </Row>\n                <Row className=\"mt-4\">\n                    <Container className={this.state.show ? null : \"d-none\" }>       \n                        <Row>\n                            <Col xl=\"12\" lg=\"12\" md=\"6\" sm=\"6\" xs=\"12\">\n                                <MultiSelect title=\"Inputs\"  options={this.state.inputDefs}  selectedValues={this.state.selectedInputs} stateChangeCallbacks={[this.updateSelectedInputs]}/>\n                            </Col>\n                            <Col xl=\"12\" lg=\"12\" md=\"6\" sm=\"6\" xs=\"12\">\n                                <MultiSelect title=\"Outputs\" options={this.state.outputDefs} selectedValues={this.state.selectedOutputs} stateChangeCallbacks={[this.updateSelectedOutputs]}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Row>\n            </Container>\n        )\n    }\n}","// @flow\nimport React, { useState } from 'react';\nimport Grid from \"./Grid\"\nimport MidiPanel from './MidiPanel';\n\nimport type {MidiMessage} from \"./MidiPanel\";\nimport type {OutputCallback} from \"./HandlerTypes\";\n\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\"\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nexport type PuzzleState = {\n    grid: Array<Array<number>>\n};\n\ntype PuzzleProps = {};\n\ntype CellDef = {\n    row: number,\n    col: number,\n    value: number\n};\n\nexport default class Puzzle extends React.Component<PuzzleProps, PuzzleState> {\n    outputCallbacks: Array<OutputCallback>;\n\n    constructor(props: PuzzleProps) {\n        super(props);\n        this.outputCallbacks = [];\n\n        // TODO: Make an image pattern instead of simple numeric values. (Do not display the number in the cell.)\n        this.state = {\n            grid: [\n                [70, 71, 72, 73, 74, 75, 76, 77],\n                [60, 61, 62, 63, 64, 65, 66, 67],\n                [50, 51, 52, 53, 54, 55, 56, 57],\n                [40, 41, 42, 43, 44, 45, 46, 47],\n                [30, 31, 32, 33, 34, 35, 36, 37],\n                [20, 21, 22, 23, 24, 25, 26, 27],\n                [10, 11, 12, 13, 14, 15, 16, 17],\n                [0, 1, 2, 3, 4, 5, 6, 7]\n            ]\n        };\n    }\n\n    // We don't care about the previous values per se, but if we do in the future, the signature is:\n    // componentDidUpdate(object prevProps, object prevState)\n    componentDidUpdate(prevProps: PuzzleProps, prevState: PuzzleState) {\n        this.updateLaunchpad();\n        this.updateOtherDevices(prevState);\n    }\n\n    updateLaunchpad = () => {\n        if (this.outputCallbacks && this.outputCallbacks.length) {\n            const launchpadMessages: Array<MidiMessage> = [];\n            for (let row = 0; row < this.state.grid.length; row++) {\n                const rowCells = this.state.grid[row];\n                for (let col = 0; col < rowCells.length; col++) {\n                    const velocity = this.state.grid[row][col];\n                    // In \"programmer\" mode on the Launchpad, the top row is 81-88, bottom is 11-18\n                    const note: number = ((8 - row) * 10) + col + 1;\n                    const noteOnMessage: MidiMessage = {\n                        type: \"noteOn\",\n                        channel: 0,\n                        velocity: velocity,\n                        note: note\n                    };\n                    launchpadMessages.push(noteOnMessage);\n                }\n            }\n\n            for (let o = 0; o < this.outputCallbacks.length; o++) {\n                const outputCallback: OutputCallback = this.outputCallbacks[o];\n                for (let m = 0; m < launchpadMessages.length; m++) {\n                    const onMessage: MidiMessage = launchpadMessages[m];\n\n                    // Update any connected and selected launchpads.\n                    outputCallback(onMessage, /Launchpad/);\n                }\n            }\n        }\n    }\n\n    // Play the note on anything else with a timed release.\n    updateOtherDevices = (prevState: PuzzleState) => {\n        if (this.outputCallbacks && this.outputCallbacks.length) {\n            const updatedCells: Array<CellDef> = [];\n            for (let row = 0; row < this.state.grid.length; row++) {\n                const rowCells: Array<number> = this.state.grid[row];\n                for (let col = 0; col < rowCells.length; col++) {\n                    if (prevState.grid[row][col] !== rowCells[col]) {\n                        updatedCells.push({\n                            row: row,\n                            col: col,\n                            value: rowCells[col]\n                        });\n                    }\n                }\n            }\n\n            const inverted: boolean = updatedCells[0].value === 0;\n            const betweenNotes = 500 / (updatedCells.length - 1);\n            const noteLength = betweenNotes * 0.8;\n            for (let m = 0; m < updatedCells.length; m++) {\n                const updatedCell: CellDef = inverted ? updatedCells[(updatedCells.length - 1) - m]:  updatedCells[m];\n                if (updatedCell.value !== 0) {\n                    // We derive the note from the row and column, but use different logic than the launchpad to avoid playing far too low or high.\n                    const note = 30 + ((8 - updatedCell.row) * 8) + updatedCell.col;\n                    const onMessage: MidiMessage = {\n                        type: \"noteOn\",\n                        channel: 0,\n                        velocity: 64,\n                        note: note\n                    };\n                    const offMessage: MidiMessage = {\n                        type: \"noteOff\",\n                        channel: 0,\n                        velocity: 0,\n                        note: note\n                    };\n                    const timeOn: number = m * betweenNotes;\n                    const timeOff: number = timeOn + noteLength;\n                    for (let o: number = 0; o < this.outputCallbacks.length; o++) {\n                        const outputCallback: OutputCallback = this.outputCallbacks[o];\n\n                        // TODO: replace with bergson\n                        setTimeout(\n                            () => { outputCallback(onMessage, /Launchpad/, true); },\n                            timeOn\n                        );\n                        setTimeout(\n                            () => { outputCallback(offMessage, /Launchpad/, true); },\n                            timeOff\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    registerOutput = (outputCallback: OutputCallback) => {\n        this.outputCallbacks.push(outputCallback);\n    }\n\n    handleMidiInput = (midiMessage: MidiMessage) => {\n        if (midiMessage.type === \"noteOn\") {\n            const note = midiMessage.note || 0;\n            const col = (note % 10) - 1;\n            const row = 8 - Math.floor(note / 10);\n            this.pushFromSquare(row, col);\n        }\n    }\n\n    pushFromSquare(row: number, col: number) {\n        // We use the function version of `setState` so that we can safely handle asynchronous changes.\n        // https://reactjs.org/docs/react-component.html#setstate\n        this.setState((currentState, props) => {\n            const cellValue = currentState.grid[row][col];\n            // No move is possible if this is the empty square (value of 0).\n            if (cellValue === 0) {\n                // TODO: Add a sound or flash when an invalid key is pressed.\n            }\n            else {\n                const thisRow = currentState.grid[row];\n                const emptyCellColumnIndex = thisRow.indexOf(0);\n\n                // We can shift pieces horizontally if our row contains the empty square.\n                if (emptyCellColumnIndex !== -1) {\n                    const rowShiftedState = currentState.grid.slice();\n\n                    // Rearrange the row so that the clicked position is now the empty square.            \n                    const shiftedRow = this.shiftArray(thisRow, emptyCellColumnIndex, col);\n                    rowShiftedState[row] = shiftedRow;\n\n                    return { grid: rowShiftedState };\n                }\n                else {\n                    // Check to see if our column contains the empty sqare\n                    const thisColumn = this.extractCol(currentState, col);\n                    const emptyCellRowIndex = thisColumn.indexOf(0);\n\n                    // We can shift pieces vertically if our column contains the empty square.\n                    if (emptyCellRowIndex !== -1) {\n                        const columnShiftedState = JSON.parse(JSON.stringify(currentState.grid));\n\n                        // Rearrange the column so that the clicked position is now the empty square.\n                        const shiftedColumn = this.shiftArray(thisColumn, emptyCellRowIndex, row);\n\n                        for (let rowIndex = 0; rowIndex < currentState.grid.length; rowIndex++) {\n                            columnShiftedState[rowIndex][col] = shiftedColumn[rowIndex];\n                        }\n\n                        return { grid: columnShiftedState };\n                    }\n                    else {\n                        // TODO: Add a sound or flash when an invalid key is pressed.\n                    }\n                }\n            }\n\n            // If  we have not previously returned a state change, return `null` to indicate that no change is required.\n            // https://reactjs.org/blog/2017/09/26/react-v16.0.html#breaking-changes (see the \"setState\" changes)\n            return null;\n        });\n    }\n\n    handleClick = (row: number, col: number) => {\n        this.pushFromSquare(row, col);\n    }\n\n    // TODO: Write tests with these and other patterns.\n    // *1 2 3 4 0 5 6 7 8 => 0 1 2 3 4 5 6 7 8\n    // 1 2 *3 4 0 5 6 7 8 => 1 2 0 3 4 5 6 7 8\n    // 1 2 3 4 0 5 6 7 *8 => 1 2 3 4 5 6 7 8 0\n    // 1 2 3 4 0 5 6 *7 8 => 1 2 3 4 5 6 7 0 8\n    shiftArray(originalArray: Array<any>, emptySpaceIndex: number, clickedEntryIndex: number) {\n        const shiftedArray: Array<any> = originalArray.slice();\n\n        // Remove the previous empty space\n        shiftedArray.splice(emptySpaceIndex, 1);\n\n        // Add an empty space at the clicked position.\n        shiftedArray.splice(clickedEntryIndex, 0, 0)\n        return shiftedArray;\n    }\n\n    extractCol(currentState: PuzzleState, colIndex: number) {\n        const columnCells = [];\n        for (let rowIndex = 0; rowIndex < currentState.grid.length; rowIndex++) {\n            columnCells.push(currentState.grid[rowIndex][colIndex]);\n        }\n        return columnCells;\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row>\n                    <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"3\" xl=\"3\">\n                        <HideableInstructions />\n                    </Col>\n                    <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n                        <Container fluid>\n                            <Row className=\"mt-3\">\n                                <Col>\n                                    <div className=\"grid\">\n                                        <Grid grid={this.state.grid}\n                                            onClick={this.handleClick}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Col>\n                    <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"3\" xl=\"3\">\n                        <MidiPanel\n                            outputAccumulator={this.registerOutput}\n                            inputListeners={[this.handleMidiInput]}\n                            outputChangeListeners={[this.updateLaunchpad]}\n                        ></MidiPanel>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n// Adapted from https://react-bootstrap.github.io/components/alerts/\nfunction HideableInstructions() {\n    const [show, setShow] = useState(true);\n    return (\n        <>\n            <Container fluid>\n                <Row className=\"mt-3\">\n                    <Col>\n                        <Button block className={show ? \"d-none\" : null} variant=\"secondary\" onClick={() => setShow(true)}>Show Instructions</Button>\n                        <Button block className={show ? null : \"d-none\"} variant=\"secondary\" onClick={() => setShow(false)}>Hide Instructions</Button>\n                    </Col>                    \n                </Row>\n                <Row className=\"mt-4\">\n                    <Col>\n                        <Alert show={show} variant=\"secondary\">\n                            <Alert.Heading>Instructions</Alert.Heading>\n\n                            <p>This is a simple sliding puzzle.  You can slide one or more squares into the \"empty\" square (black).</p>\n\n                            <p>You can use a mouse or keyboard to operate the puzzle.  Use tabs or arrow keys to navigate, hit enter on any square that shares a row with the empty square.</p>\n\n                            <p>You can connect to MIDI devices using the \"Show MIDI options\" button to the right of the screen.</p>\n                        </Alert>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport Puzzle from './Puzzle';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <Puzzle />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}