{"version":3,"sources":["index.js"],"names":["Cell","className","ref","this","props","cellRef","row","col","onClick","handleClick","onKeyDown","event","handleKeyDown","value","React","Component","Row","parseInt","offset","numCells","renderStack","i","push","renderSquare","cellRefs","cells","key","renderSquares","watchedKeys","Grid","numRows","Array","rowIndex","colIndex","createRef","gridComponent","cellProps","indexOf","targetRow","targetCol","current","focus","grid","renderRows","Puzzle","state","thisRow","emptyCellColumnIndex","rowShiftedState","slice","shiftedRow","shiftArray","setState","thisColumn","extractCol","emptyCellRowIndex","columnShiftedState","shiftedColumn","length","originalArray","emptySpaceIndex","clickedEntryIndex","shiftedArray","splice","columnCells","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c73ddc36.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Cell extends React.Component {\n    render() {\n        return (\n            <button className=\"cell\" ref={this.props.cellRef} row={this.props.row} col={this.props.col} onClick={()=>{ this.props.handleClick(this.props)}} onKeyDown={(event) => { this.props.handleKeyDown(event, this.props)}}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Row extends React.Component {\n    constructor (props) {\n        super(props);\n        this.row      = parseInt(props.row, 10);\n        this.offset   =  this.row * 8;\n        this.numCells = props.numCells || 8;\n    }\n\n    renderSquares() {\n        var renderStack = [];\n        for (var i = 0; i < this.numCells; i++) {\n            renderStack.push(this.renderSquare(i));\n        }\n        return renderStack;\n    }\n\n    renderSquare(i) {\n        return <Cell cellRef={this.props.cellRefs[i]} value={this.props.cells[i]} handleKeyDown={this.props.handleKeyDown} handleClick={this.props.handleClick} key={\"cell-\" + (this.offset + i)} col={i} row={this.row}/>;\n    }\n\n    render () {\n        return (\n            <div className=\"row\">\n                {this.renderSquares()}\n            </div>            \n        )\n    }\n}\n\nconst watchedKeys = [\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\"\n];\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.numRows  = props.numRows  || 8;\n        this.numCells = props.numCells || 8;\n\n\n        this.cellRefs = Array(this.numRows);\n\n        for (var rowIndex = 0; rowIndex < this.numRows; rowIndex++) {\n            this.cellRefs[rowIndex] = Array(this.numCells);\n            for (var colIndex = 0; colIndex < this.numRows; colIndex++) {\n                this.cellRefs[rowIndex][colIndex] = React.createRef();\n            }\n        }\n    }\n\n    handleKeyDown(gridComponent, event, cellProps) {\n        if (watchedKeys.indexOf(event.key) !== -1) {\n            var targetRow = cellProps.row;\n            var targetCol = cellProps.col;\n            \n            // ArrowDown\n            if (event.key === \"ArrowDown\") {\n                targetRow = (targetRow + 1) % this.numRows;\n            }\n\n            // ArrowUp\n            else if (event.key === \"ArrowUp\") {\n                targetRow = (targetRow + ( this.numRows - 1)) % this.numRows;\n            }\n\n            // ArrowLeft\n            else if (event.key === \"ArrowLeft\") {\n                targetCol= (targetCol + ( this.numRows - 1)) % this.numCells;\n            }\n\n            // ArrowRight\n            else if (event.key === \"ArrowRight\") {\n                targetCol= (targetCol + 1) % this.numCells;\n            }\n\n            var toFocus = gridComponent.cellRefs[targetRow][targetCol];\n            toFocus.current.focus();\n        }\n    }\n\n    renderRows() {\n        var renderStack = [];\n\n        for (var i = 0; i < this.numRows; i++) {\n            renderStack.push(<Row cellRefs={this.cellRefs[i]} numCells={this.numCells} cells={this.props.grid[i]} handleKeyDown= {(event, cellProps) => {this.handleKeyDown(this,event, cellProps)}} handleClick={this.props.handleClick} key={\"row-\" + i} row={i}/>)\n        }\n        return renderStack;\n\n    }\n    // TODO: Iterate rather than spitting out duplicate lines of HTML\n    render() {\n        return (\n            <div>\n                {this.renderRows()}\n          </div>\n        );\n    }\n  }\n  \n  class Puzzle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [\n                [ 0, 1, 2, 3, 4, 5, 6, 7],\n                [10,11,12,13,14,15,16,17],\n                [20,21,22,23,24,25,26,27],\n                [30,31,32,33,34,35,36,37],\n                [40,41,42,43,44,45,46,47],\n                [50,51,52,53,54,55,56,57],\n                [60,61,62,63,64,65,66,67],\n                [70,71,72,73,74,75,76,-1]\n            ]\n        };\n    }\n\n    handleClick(cellProps) {\n        // No move is possible if this is the empty square (value of -1).\n        if (cellProps.value === -1) {\n            // TODO: Add a sound or flash when an invalid key is pressed.\n        }\n        else {\n            var thisRow = this.state.grid[cellProps.row];\n            var emptyCellColumnIndex = thisRow.indexOf(-1);\n            \n            // We can shift pieces horizontally if our row contains the empty square.\n            if (emptyCellColumnIndex !== -1) {\n                var rowShiftedState = this.state.grid.slice();\n\n                // Rearrange the row so that the clicked position is now the empty square.            \n                var shiftedRow = this.shiftArray(thisRow, emptyCellColumnIndex, cellProps.col);\n                rowShiftedState[cellProps.row] = shiftedRow;\n\n                this.setState({grid: rowShiftedState});\n            }\n            else {\n                // Check to see if our column contains the empty sqare\n                var thisColumn = this.extractCol(cellProps.col);\n                var emptyCellRowIndex = thisColumn.indexOf(-1);\n                \n                // We can shift pieces vertically if our column contains the empty square.\n                if (emptyCellRowIndex !== -1) {\n                    var columnShiftedState = this.state.grid.slice();\n                    \n                    // Rearrange the column so that the clicked position is now the empty square.\n                    var shiftedColumn = this.shiftArray(thisColumn, emptyCellRowIndex, cellProps.row);\n\n                    for (var rowIndex = 0; rowIndex < this.state.grid.length; rowIndex++) {\n                        columnShiftedState[rowIndex][cellProps.col] = shiftedColumn[rowIndex];\n                    }\n\n                    // Save the updated state            \n                    this.setState({ grid: columnShiftedState})\n                }            \n                else {\n                    // TODO: Add a sound or flash when an invalid key is pressed.\n                }\n            }\n        }\n    }\n    \n    // TODO: Write tests with these and other patterns.\n    // *1 2 3 4 -1 5 6 7 8 => -1 1 2 3 4 5 6 7 8\n    // 1 2 *3 4 -1 5 6 7 8 => 1 2 -1 3 4 5 6 7 8\n    // 1 2 3 4 -1 5 6 7 *8 => 1 2 3 4 5 6 7 8 -1\n    // 1 2 3 4 -1 5 6 *7 8 => 1 2 3 4 5 6 7 -1 8\n    shiftArray(originalArray, emptySpaceIndex, clickedEntryIndex) {\n        var shiftedArray = originalArray.slice();\n        \n        // Remove the previous empty space\n        shiftedArray.splice(emptySpaceIndex, 1);\n\n        // Add an empty space at the clicked position.\n        shiftedArray.splice(clickedEntryIndex, 0, -1)\n        return shiftedArray;\n    }\n\n    extractCol(colIndex) {\n        var columnCells = [];\n        for (var rowIndex = 0; rowIndex < this.state.grid.length; rowIndex++) {\n            columnCells.push(this.state.grid[rowIndex][colIndex]);\n        }\n        return columnCells;\n    }\n\n    render() {\n        return (\n        <div className=\"puzzle\">\n          <div className=\"grid\">\n            <Grid grid={this.state.grid}\n                handleClick={(i) => this.handleClick(i)}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Puzzle />,\n    document.getElementById('root')\n  );"],"sourceRoot":""}